{"version":3,"sources":["common/events.js"],"names":["getEventOption","element","name","attr","attributes","option","container","Container","instance","util","get","Util","i","len","startsWith","constants","eventPrefix","actualEventName","split","eventName","_unhyphenate","fireEvent","e","length","data","event","CustomEvent","detail","bubbles","dispatchEvent"],"mappings":";;;;;;AAQO,WAASA,cAAT,CAAwBC,OAAxB,EAAiC;AACtC,QAAIC,aAAJ;AACA,QAAIC,aAAJ;AACA,QAAIC,aAAaH,QAAQG,UAAzB;AACA,QAAIC,SAAS,EAAb;AACA,QAAIC,YAAaC,UAAUC,QAAV,IAAsB,IAAID,SAAJ,EAAvC;AACA,QAAIE,OAAOH,UAAUI,GAAV,CAAcC,IAAd,CAAX;;AANsC,+BAO7BC,CAP6B,EAOtBC,GAPsB;AAQpCV,aAAOC,WAAWQ,CAAX,CAAP;AACAV,aAAOC,KAAKD,IAAZ;AACA,UAAI,CAACA,KAAKY,UAAL,CAAgBC,UAAUC,WAA1B,CAAL,EAA6C;AAC3C;AACD;AACD,UAAIC,kBAAkBf,KAAKgB,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAAtB;AACA,UAAIC,YAAYV,KAAKW,YAAL,CAAkBH,gBAAgBC,KAAhB,CAAsBH,UAAUC,WAAhC,EAA6C,CAA7C,CAAlB,CAAhB;AACAX,aAAOc,SAAP,IAAoB;AAAA,eAAKE,UAAUpB,OAAV,EAAmBgB,eAAnB,EAAoCK,CAApC,CAAL;AAAA,OAApB;AAfoC;;AAOtC,SAAK,IAAIV,IAAI,CAAR,EAAWC,MAAMT,WAAWmB,MAAjC,EAAyCX,IAAIC,GAA7C,EAAkDD,GAAlD,EAAuD;AAAA,uBAA9CA,CAA8C,EAAvCC,GAAuC;;AAAA,+BAInD;AAKH;AACD,WAAOR,MAAP;AACD;;4BAlBeL,c;;AAyBT,WAASqB,SAAT,CAAmBpB,OAAnB,EAAqCC,IAArC,EAA+D;AAAA,QAAZsB,IAAY,uEAAJ,EAAI;;AACpE,QAAIC,QAAQ,IAAIC,WAAJ,CAAgBxB,IAAhB,EAAsB;AAChCyB,cAAQH,IADwB;AAEhCI,eAAS;AAFuB,KAAtB,CAAZ;AAIA3B,YAAQ4B,aAAR,CAAsBJ,KAAtB;AACA,WAAOA,KAAP;AACD;;uBAPeJ,S;;;;AAjCRV,U,SAAAA,I;;AACAJ,e,+BAAAA,S;;AACAQ,e,cAAAA,S","file":"../../../common/events.js","sourcesContent":["import {Util} from './util';\r\nimport {Container} from 'aurelia-dependency-injection';\r\nimport {constants} from './constants';\r\n\r\n/**\r\n* To get binded events from the element\r\n* @param element The Element from which events acquired\r\n*/\r\nexport function getEventOption(element) {\r\n  let name;\r\n  let attr;\r\n  let attributes = element.attributes;\r\n  let option = {};\r\n  let container = (Container.instance || new Container());\r\n  let util = container.get(Util);\r\n  for (let i = 0, len = attributes.length; i < len; i++) {\r\n    attr = attributes[i];\r\n    name = attr.name;\r\n    if (!name.startsWith(constants.eventPrefix)) {\r\n      continue;\r\n    }\r\n    let actualEventName = name.split('.')[0];//Event name with constants event prefix\r\n    let eventName = util._unhyphenate(actualEventName.split(constants.eventPrefix)[1]);\r\n    option[eventName] = e => fireEvent(element, actualEventName, e);  // eslint-disable-line no-loop-func\r\n  }\r\n  return option;\r\n}\r\n/**\r\n* Fire DOM event on an element\r\n* @param element The Element which the DOM event will be fired on\r\n* @param name The Event's name\r\n* @param data Addition data to attach to an event\r\n*/\r\nexport function fireEvent(element: Element, name: string, data? = {}) {\r\n  let event = new CustomEvent(name, {\r\n    detail: data,\r\n    bubbles: true\r\n  });\r\n  element.dispatchEvent(event);\r\n  return event;\r\n}\r\n"]}